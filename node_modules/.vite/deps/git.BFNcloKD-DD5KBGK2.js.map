{
  "version": 3,
  "sources": ["../../vitest/dist/chunks/git.BFNcloKD.js"],
  "sourcesContent": ["import { resolve } from 'pathe';\nimport { x } from 'tinyexec';\n\nclass VitestGit {\n\troot;\n\tconstructor(cwd) {\n\t\tthis.cwd = cwd;\n\t}\n\tasync resolveFilesWithGitCommand(args) {\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await x(\"git\", args, { nodeOptions: { cwd: this.root } });\n\t\t} catch (e) {\n\t\t\tthrow e.message = e.stderr, e;\n\t\t}\n\t\treturn result.stdout.split(\"\\n\").filter((s) => s !== \"\").map((changedPath) => resolve(this.root, changedPath));\n\t}\n\tasync findChangedFiles(options) {\n\t\tconst root = await this.getRoot(this.cwd);\n\t\tif (!root) return null;\n\t\tthis.root = root;\n\t\tconst changedSince = options.changedSince;\n\t\tif (typeof changedSince === \"string\") {\n\t\t\tconst [committed, staged, unstaged] = await Promise.all([\n\t\t\t\tthis.getFilesSince(changedSince),\n\t\t\t\tthis.getStagedFiles(),\n\t\t\t\tthis.getUnstagedFiles()\n\t\t\t]);\n\t\t\treturn [\n\t\t\t\t...committed,\n\t\t\t\t...staged,\n\t\t\t\t...unstaged\n\t\t\t];\n\t\t}\n\t\tconst [staged, unstaged] = await Promise.all([this.getStagedFiles(), this.getUnstagedFiles()]);\n\t\treturn [...staged, ...unstaged];\n\t}\n\tgetFilesSince(hash) {\n\t\treturn this.resolveFilesWithGitCommand([\n\t\t\t\"diff\",\n\t\t\t\"--name-only\",\n\t\t\t`${hash}...HEAD`\n\t\t]);\n\t}\n\tgetStagedFiles() {\n\t\treturn this.resolveFilesWithGitCommand([\n\t\t\t\"diff\",\n\t\t\t\"--cached\",\n\t\t\t\"--name-only\"\n\t\t]);\n\t}\n\tgetUnstagedFiles() {\n\t\treturn this.resolveFilesWithGitCommand([\n\t\t\t\"ls-files\",\n\t\t\t\"--other\",\n\t\t\t\"--modified\",\n\t\t\t\"--exclude-standard\"\n\t\t]);\n\t}\n\tasync getRoot(cwd) {\n\t\tconst args = [\"rev-parse\", \"--show-cdup\"];\n\t\ttry {\n\t\t\tconst result = await x(\"git\", args, { nodeOptions: { cwd } });\n\t\t\treturn resolve(cwd, result.stdout.trim());\n\t\t} catch {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport { VitestGit };\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAGA,IAAM,YAAN,MAAgB;AAAA,EAEf,YAAY,KAAK;AADjB;AAEC,SAAK,MAAM;AAAA,EACZ;AAAA,EACA,MAAM,2BAA2B,MAAM;AACtC,QAAI;AACJ,QAAI;AACH,eAAS,MAAM,GAAE,OAAO,MAAM,EAAE,aAAa,EAAE,KAAK,KAAK,KAAK,EAAE,CAAC;AAAA,IAClE,SAAS,GAAG;AACX,YAAM,EAAE,UAAU,EAAE,QAAQ;AAAA,IAC7B;AACA,WAAO,OAAO,OAAO,MAAM,IAAI,EAAE,OAAO,CAAC,MAAM,MAAM,EAAE,EAAE,IAAI,CAAC,gBAAgB,QAAQ,KAAK,MAAM,WAAW,CAAC;AAAA,EAC9G;AAAA,EACA,MAAM,iBAAiB,SAAS;AAC/B,UAAM,OAAO,MAAM,KAAK,QAAQ,KAAK,GAAG;AACxC,QAAI,CAAC,KAAM,QAAO;AAClB,SAAK,OAAO;AACZ,UAAM,eAAe,QAAQ;AAC7B,QAAI,OAAO,iBAAiB,UAAU;AACrC,YAAM,CAAC,WAAWA,SAAQC,SAAQ,IAAI,MAAM,QAAQ,IAAI;AAAA,QACvD,KAAK,cAAc,YAAY;AAAA,QAC/B,KAAK,eAAe;AAAA,QACpB,KAAK,iBAAiB;AAAA,MACvB,CAAC;AACD,aAAO;AAAA,QACN,GAAG;AAAA,QACH,GAAGD;AAAA,QACH,GAAGC;AAAA,MACJ;AAAA,IACD;AACA,UAAM,CAAC,QAAQ,QAAQ,IAAI,MAAM,QAAQ,IAAI,CAAC,KAAK,eAAe,GAAG,KAAK,iBAAiB,CAAC,CAAC;AAC7F,WAAO,CAAC,GAAG,QAAQ,GAAG,QAAQ;AAAA,EAC/B;AAAA,EACA,cAAc,MAAM;AACnB,WAAO,KAAK,2BAA2B;AAAA,MACtC;AAAA,MACA;AAAA,MACA,GAAG,IAAI;AAAA,IACR,CAAC;AAAA,EACF;AAAA,EACA,iBAAiB;AAChB,WAAO,KAAK,2BAA2B;AAAA,MACtC;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,mBAAmB;AAClB,WAAO,KAAK,2BAA2B;AAAA,MACtC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,MAAM,QAAQ,KAAK;AAClB,UAAM,OAAO,CAAC,aAAa,aAAa;AACxC,QAAI;AACH,YAAM,SAAS,MAAM,GAAE,OAAO,MAAM,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;AAC5D,aAAO,QAAQ,KAAK,OAAO,OAAO,KAAK,CAAC;AAAA,IACzC,QAAQ;AACP,aAAO;AAAA,IACR;AAAA,EACD;AACD;",
  "names": ["staged", "unstaged"]
}
