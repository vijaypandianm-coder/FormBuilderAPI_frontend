import {
  BaseSequencer,
  FilesNotFoundError,
  ForksPoolWorker,
  GitNotFoundError,
  ThreadsPoolWorker,
  TypecheckPoolWorker,
  Vitest,
  VitestPackageInstaller,
  VitestPlugin,
  VmForksPoolWorker,
  VmThreadsPoolWorker,
  createDebugger,
  createMethodsRPC,
  createViteLogger,
  createVitest,
  escapeTestName,
  experimental_getRunnerTask,
  getFilePoolName,
  isValidApiRequest,
  parseCLI,
  registerConsoleShortcuts,
  require_browser,
  require_buffer,
  require_http,
  require_https,
  require_net,
  require_node_tty,
  require_tls,
  resolveApiServerConfig,
  resolveConfig$1,
  resolveFsAllow,
  startVitest
} from "./chunk-RJXX256H.js";
import {
  deepClone,
  distDir,
  generateFileHash,
  import_esbuild,
  require_node_console,
  require_node_stream,
  rootDir,
  slash
} from "./chunk-27ZNANQB.js";
import {
  configFiles
} from "./chunk-PHFRUQN7.js";
import "./chunk-HUUV2CJB.js";
import {
  resolve
} from "./chunk-5ZZAFORQ.js";
import "./chunk-JY2H3NC3.js";
import {
  VERSION,
  createServer$2,
  isCSSRequest,
  isFileServingAllowed,
  mergeConfig,
  require_crypto,
  require_node_assert,
  require_node_child_process,
  require_node_crypto,
  require_node_events,
  require_node_readline,
  require_node_util,
  require_node_v8,
  require_node_worker_threads,
  require_picomatch,
  require_zlib,
  resolveConfig,
  rollupVersion
} from "./chunk-P4ZB3LCK.js";
import "./chunk-6343F3HK.js";
import "./chunk-SE2Z4HDV.js";
import {
  require_url
} from "./chunk-PGHFWCZA.js";
import {
  any
} from "./chunk-A7V4J3LA.js";
import {
  require_readline
} from "./chunk-HFGUXVMG.js";
import {
  require_node_url
} from "./chunk-MYHZVKW7.js";
import "./chunk-D46UPOYZ.js";
import "./chunk-UN726CMJ.js";
import {
  require_stream
} from "./chunk-J2SMN4EQ.js";
import {
  require_node_os
} from "./chunk-EXACAG4Z.js";
import {
  parseAst,
  parseAstAsync,
  require_node_perf_hooks
} from "./chunk-R2F3KQRP.js";
import {
  require_node_process
} from "./chunk-VOWBBAOG.js";
import "./chunk-YDU7JSK5.js";
import "./chunk-BFSZNRNG.js";
import {
  require_events
} from "./chunk-4QXANL6B.js";
import {
  require_node_fs
} from "./chunk-Y27CEZEH.js";
import {
  require_node_module
} from "./chunk-5GUNUIXR.js";
import {
  require_node_path
} from "./chunk-PTHJ7W2W.js";
import {
  require_promises
} from "./chunk-2F4QH2CI.js";
import {
  __toESM
} from "./chunk-UN725CXD.js";

// node_modules/vitest/dist/node.js
var import_node_fs = __toESM(require_node_fs());
var import_node_path = __toESM(require_node_path());
var import_node_os = __toESM(require_node_os());
var import_promises = __toESM(require_promises());
var import_node_perf_hooks = __toESM(require_node_perf_hooks());
var import_node_util = __toESM(require_node_util());
var import_node_console = __toESM(require_node_console());
var import_node_stream = __toESM(require_node_stream());
var import_node_module = __toESM(require_node_module());
var import_events = __toESM(require_events());
var import_https = __toESM(require_https());
var import_http = __toESM(require_http());
var import_net = __toESM(require_net());
var import_tls = __toESM(require_tls());
var import_crypto = __toESM(require_crypto());
var import_stream = __toESM(require_stream());
var import_url = __toESM(require_url());
var import_zlib = __toESM(require_zlib());
var import_buffer = __toESM(require_buffer());
var import_node_crypto = __toESM(require_node_crypto());
var import_debug = __toESM(require_browser());
var import_node_url = __toESM(require_node_url());
var import_node_tty = __toESM(require_node_tty());
var import_node_events = __toESM(require_node_events());
var import_node_child_process = __toESM(require_node_child_process());
var import_node_v8 = __toESM(require_node_v8());
var import_node_worker_threads = __toESM(require_node_worker_threads());
var import_picomatch = __toESM(require_picomatch());
var import_node_assert = __toESM(require_node_assert());
var import_node_readline = __toESM(require_node_readline());
var import_node_process = __toESM(require_node_process());
var import_readline = __toESM(require_readline());
async function resolveConfig2(options = {}, viteOverrides = {}) {
  const root = slash(resolve(options.root || process.cwd())), configPath = options.config === false ? false : options.config ? resolve(root, options.config) : any(configFiles, { cwd: root });
  options.config = configPath;
  const vitest = new Vitest("test", deepClone(options)), config = await resolveConfig(mergeConfig({
    configFile: configPath,
    mode: options.mode || "test",
    plugins: [await VitestPlugin(options, vitest)]
  }, mergeConfig(viteOverrides, { root: options.root })), "serve"), updatedOptions = Reflect.get(config, "_vitest"), vitestConfig = resolveConfig$1(vitest, updatedOptions, config);
  return await vitest.close(), {
    viteConfig: config,
    vitestConfig
  };
}
var version = Vitest.version;
var createViteServer = createServer$2;
var rolldownVersion2 = void 0;
var export_esbuildVersion = import_esbuild.version;
export {
  BaseSequencer,
  ForksPoolWorker,
  GitNotFoundError,
  FilesNotFoundError as TestsNotFoundError,
  ThreadsPoolWorker,
  TypecheckPoolWorker,
  VitestPackageInstaller,
  VitestPlugin,
  VmForksPoolWorker,
  VmThreadsPoolWorker,
  createDebugger,
  createMethodsRPC,
  createViteLogger,
  createViteServer,
  createVitest,
  distDir,
  export_esbuildVersion as esbuildVersion,
  escapeTestName,
  experimental_getRunnerTask,
  generateFileHash,
  getFilePoolName,
  isCSSRequest,
  isFileServingAllowed,
  isValidApiRequest,
  parseAst,
  parseAstAsync,
  parseCLI,
  registerConsoleShortcuts,
  resolveApiServerConfig,
  resolveConfig2 as resolveConfig,
  resolveFsAllow,
  rolldownVersion2 as rolldownVersion,
  rollupVersion,
  rootDir,
  startVitest,
  version,
  VERSION as viteVersion
};
//# sourceMappingURL=vitest_node.js.map
