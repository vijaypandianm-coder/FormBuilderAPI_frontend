import React from "react";
import { MemoryRouter, Route, Routes } from "react-router-dom";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";

// IMPORTANT: mock with the same paths used by the component
vi.mock("@src/api/forms", () => ({
  FormService: {
    get: vi.fn().mockResolvedValue({
      id: "x1",
      formKey: 77,
      title: "T",
      description: "D",
    }),
    layout: vi.fn().mockResolvedValue({
      sections: [
        {
          title: "S1",
          fields: [
            // required text
            { fieldId: "f1", label: "Name", type: "text", isRequired: true },
            // required file
            { fieldId: "f2", label: "Resume", type: "file", isRequired: true },
          ],
        },
      ],
    }),
  },
}));

const apiFetch = vi.fn().mockResolvedValue({});
vi.mock("@src/api/http", () => ({ apiFetch }));

import FormSubmissionPage from "@src/pages/FormSubmissionPage.jsx";

function renderAt(path = "/forms/77") {
  return render(
    <MemoryRouter initialEntries={[path]}>
      <Routes>
        <Route path="/forms/:formKey" element={<FormSubmissionPage />} />
        <Route path="/learn/my-submissions" element={<div>MY SUBS</div>} />
      </Routes>
    </MemoryRouter>
  );
}

describe("<FormSubmissionPage /> submit", () => {
  it("submits when required text + file present", async () => {
    renderAt();

    // wait for layout/meta to load
    await screen.findByText("T");

    // fill text
    fireEvent.change(screen.getAllByPlaceholderText(/your answer/i)[0], {
      target: { value: "Alice" },
    });

    // choose file (no label 'for', so query by selector)
    const fileInput = document.querySelector('input[type="file"]');
    expect(fileInput).toBeTruthy();
    const file = new File(["dummy"], "cv.pdf", { type: "application/pdf" });
    fireEvent.change(fileInput, { target: { files: [file] } });

    // submit
    fireEvent.click(screen.getByRole("button", { name: /submit/i }));

    await waitFor(() =>
      expect(apiFetch).toHaveBeenCalledWith(
        "/api/Responses/77",
        expect.objectContaining({ method: "POST" })
      )
    );

    // optional: ensure it navigated to success page
    await screen.findByText("MY SUBS");
  });
});