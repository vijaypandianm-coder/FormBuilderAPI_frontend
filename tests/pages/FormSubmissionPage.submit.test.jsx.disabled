import React from "react";
import { MemoryRouter, Route, Routes } from "react-router-dom";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { vi } from "vitest";

// ------------------ FIX: use safe manual mocks ------------------
vi.mock("@src/api/http", async () => {
  // lazy factory so Vitest doesnâ€™t hoist variables before init
  return { apiFetch: vi.fn(async () => ({ ok: true, json: async () => ({}) })) };
});

vi.mock("@src/api/forms", async () => {
  return {
    FormService: {
      get: vi.fn(async () => ({
        id: "x1",
        formKey: 77,
        title: "T",
        description: "D",
        status: "Published",
      })),
      layout: vi.fn(async () => ({
        sections: [
          {
            title: "S1",
            fields: [
              { fieldId: "f1", label: "Name", type: "text", isRequired: true },
              { fieldId: "f2", label: "Resume", type: "file", isRequired: true },
            ],
          },
        ],
      })),
    },
  };
});
// ---------------------------------------------------------------

import { apiFetch } from "@src/api/http";
import FormSubmissionPage from "@src/pages/FormSubmissionPage.jsx";

// jsdom CSS patch to silence errors
Object.defineProperty(window.CSSStyleDeclaration.prototype, "setProperty", {
  value(prop, val) {
    try {
      this[prop] = val;
    } catch {}
  },
});

function renderAt(path = "/forms/77") {
  return render(
    <MemoryRouter initialEntries={[path]}>
      <Routes>
        <Route path="/forms/:formKey" element={<FormSubmissionPage />} />
        <Route path="/learn/my-submissions" element={<div>MY SUBS</div>} />
      </Routes>
    </MemoryRouter>
  );
}

describe("<FormSubmissionPage /> submit", () => {
  it("submits when required text + file present", async () => {
    renderAt();

    // wait for title (from FormService.get)
    await screen.findByText("T");

    fireEvent.change(screen.getAllByPlaceholderText(/your answer/i)[0], {
      target: { value: "Alice" },
    });

    const file = new File(["dummy"], "cv.pdf", { type: "application/pdf" });
    const fileInput = document.querySelector('input[type="file"]');
    expect(fileInput).toBeTruthy();
    fireEvent.change(fileInput, { target: { files: [file] } });

    fireEvent.click(screen.getByRole("button", { name: /submit/i }));

    await waitFor(() =>
      expect(apiFetch).toHaveBeenCalledWith(
        "/api/Responses/77",
        expect.objectContaining({ method: "POST" })
      )
    );
    await screen.findByText("MY SUBS");
  });

  it("does not submit if required file missing", async () => {
    renderAt();

    await screen.findByText("T");
    fireEvent.change(screen.getAllByPlaceholderText(/your answer/i)[0], {
      target: { value: "Alice" },
    });

    fireEvent.click(screen.getByRole("button", { name: /submit/i }));
    await waitFor(() => expect(apiFetch).not.toHaveBeenCalled());
  });
});